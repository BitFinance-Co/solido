(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[971],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return g}});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(a),g=i,c=p["".concat(l,".").concat(g)]||p[g]||m[g]||n;return a?r.createElement(c,o(o({ref:t},u),{},{components:a})):r.createElement(c,o({ref:t},u))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<n;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},180:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=a(2122),i=a(9756),n=(a(7294),a(3905)),o={title:"multisigcli",description:"Overview of CLI for Governance",keywords:["governance","multi-sig","lido","solido","solana","cli"],sidebar_position:2},s={unversionedId:"Guides/Governance/UsingCLIForMultiSig",id:"Guides/Governance/UsingCLIForMultiSig",isDocsHomePage:!1,title:"Using the Solido CLI for Governance",description:"Overview of CLI for Governance",source:"@site/docs/Guides/Governance/UsingCLIForMultiSig.md",sourceDirName:"Guides/Governance",slug:"/Guides/Governance/UsingCLIForMultiSig",permalink:"/solido/docs/Guides/Governance/UsingCLIForMultiSig",version:"current",sidebarPosition:2,frontMatter:{title:"multisigcli",description:"Overview of CLI for Governance",keywords:["governance","multi-sig","lido","solido","solana","cli"],sidebar_position:2},sidebar:"solidoSidebar",previous:{title:"Governance Overview",permalink:"/solido/docs/Guides/Governance/Governance"},next:{title:"Validation Overview",permalink:"/solido/docs/Guides/Validation/Validation"}},l=[{value:"MultiSig Governance",id:"multisig-governance",children:[{value:"Creating a new MultiSig address",id:"creating-a-new-multisig-address",children:[]},{value:"Showing details of the MultiSig",id:"showing-details-of-the-multisig",children:[]},{value:"Approving a MultiSig Transaction",id:"approving-a-multisig-transaction",children:[]},{value:"Executing a MultiSig Transaction",id:"executing-a-multisig-transaction",children:[]},{value:"Proposing a change",id:"proposing-a-change",children:[]},{value:"Proposing an upgrade",id:"proposing-an-upgrade",children:[]}]},{value:"General Governance",id:"general-governance",children:[{value:"Adding a maintainer",id:"adding-a-maintainer",children:[]},{value:"Removing a maintainer",id:"removing-a-maintainer",children:[]},{value:"Adding a validator",id:"adding-a-validator",children:[]},{value:"Creating a validator stake account",id:"creating-a-validator-stake-account",children:[]},{value:"Creating the Solido instance.",id:"creating-the-solido-instance",children:[]}]}],d={toc:l};function u(e){var t=e.components,a=(0,i.Z)(e,["components"]);return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"multisig-governance"},"MultiSig Governance"),(0,n.kt)("p",null,"All mutlisig functionality relating to Solido can be accessed through the multisig subcommand:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address ...\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"$multisig-program-address")," is the id of the on-chain multisig program."),(0,n.kt)("p",null,"The following sections go through descriptions of the subcommands."),(0,n.kt)("h3",{id:"creating-a-new-multisig-address"},"Creating a new MultiSig address"),(0,n.kt)("p",null,"In order to create a new multisig address"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address create-multisig --threshold $threshold --owner $owner1 --owner $owner2 ...\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"threshold")," -> This is the minimum number of signatures required to approve a transaction.  At most, this should be the number of multisig participants."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"owner")," ->  The public key  of a multisig participant. Multiples of this argument can be supplied to cover all participants."))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig address"),": The public key address of the multisig program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig program derived address"),": The public key derived address of the multisig program")))),(0,n.kt)("h3",{id:"showing-details-of-the-multisig"},"Showing details of the MultiSig"),(0,n.kt)("p",null,"To view details of the MultiSig"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address show-multisig  --multisig-address $multisig-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig program"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig program derived address"),": The public key derived address of the multisig program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"threshold"),": The current minimum number of signers required to approve a transaction"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"owners"),": List of the multisig owner public keys")))),(0,n.kt)("h3",{id:"approving-a-multisig-transaction"},"Approving a MultiSig Transaction"),(0,n.kt)("p",null,"A MultiSig owner can approve a transaction using the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address approve  --multisig-address $owner-address --transaction-address $transaction-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"owner-address")," -> This is the address of the multisig owner who"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address")," -> The address of the transaction to be approved"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"signature"),": The signature of the approval")))),(0,n.kt)("h3",{id:"executing-a-multisig-transaction"},"Executing a MultiSig Transaction"),(0,n.kt)("p",null,"A transaction can be executed, once it has the required number of a approvals, using the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address execute-transaction  --multisig-address $multisig-address --transaction-address $transaction-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address")," -> The address of the transaction to be approved"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"signature"),": The signature of the transaction")))),(0,n.kt)("h3",{id:"proposing-a-change"},"Proposing a change"),(0,n.kt)("p",null,"Proposing a change to the threshold or owners of the multisig can be achieved with the following:\nA transaction can be executed, once it has the required number of a approvals, using the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address propose-change-multisig  --multisig-address $multisig-address --threshold $threshold --owner $owner1 --owner $owner2 ...\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"threshold")," -> This is the minimum number of signatures required to approve a transaction.  At most, this should be the number of multisig participants."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"owner")," ->  The public key  of a multisig participant. Multiples of this argument can be supplied to cover all participants."))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h3",{id:"proposing-an-upgrade"},"Proposing an upgrade"),(0,n.kt)("p",null,"Proposing a change to the threshold or owners of the multisig can be achieved with the following:\nA transaction can be executed, once it has the required number of a approvals, using the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido multisig --multisig-program-id $multisig-program-address propose-change-multisig  --multisig-address $multisig-address --program-address $program-address --buffer-address $buffer-address --spill-address $spill-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"program-address")," -> This is the address of the program to upgrade"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"buffer-address")," -> This is the address that holds the new program data"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"spill-address")," -> This address will receive leftover funds from the buffer account"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h2",{id:"general-governance"},"General Governance"),(0,n.kt)("h3",{id:"adding-a-maintainer"},"Adding a maintainer"),(0,n.kt)("p",null,"To add a maintainer for Solido one can use the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido add-maintainer --solido-program-id $solido-program-id --solido-address $solido-address --maintainer-address $maintainer-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-program-id")," -> This is the address of the Solido program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-address")," -> This is the address of the account that stores the data for the Solido instance"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"maintainer-address")," -> This is the address of the maintainer to be added"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig account"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-program-id")," -> This is the address of the multisig program"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h3",{id:"removing-a-maintainer"},"Removing a maintainer"),(0,n.kt)("p",null,"To remove a maintainer for Solido one can use the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido remove-maintainer --solido-program-id $solido-program-id --solido-address $solido-address --maintainer-address $maintainer-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-program-id")," -> This is the address of the Solido program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-address")," -> This is the address of the account that stores the data for the Solido instance"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"maintainer-address")," -> This is the address of the maintainer to be added"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-address")," -> This is the address of the multisig account"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"multisig-program-id")," -> This is the address of the multisig program"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h3",{id:"adding-a-validator"},"Adding a validator"),(0,n.kt)("p",null,"To add a validator for Solido one can use the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido add-validator --solido-program-id $solido-program-id --solido-address $solido-address --stake-pool-program-id  $stake-pool-program-id  --validator-vote $validator-vote-account --validator-rewards-address  $validator-rewards-address\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-program-id")," -> This is the address of the Solido program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-address")," -> This is the address of the account that stores the data for the Solido instance"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"stake-pool-program-id")," -> This is the address of the stake pool program deployed with Solido"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"validator-vote")," -> This is the address of the vote account for the validator being added"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"validator-rewards-address")," -> This is the address that stSol rewards will be sent to"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h3",{id:"creating-a-validator-stake-account"},"Creating a validator stake account"),(0,n.kt)("p",null,"In order to create the stake account that a validator will use, the solido cli provides the following operation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido create-validator-stake-account --solido-program-id $solido-program-id --solido-address $solido-address --stake-pool-program-id  $stake-pool-program-id  --validator-vote $validator-vote-account\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-program-id")," -> This is the address of the Solido program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-address")," -> This is the address of the account that stores the data for the Solido instance"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"stake-pool-program-id")," -> This is the address of the stake pool program deployed with Solido"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"validator-vote")," -> This is the address of the vote account for the validator being added"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))),(0,n.kt)("h3",{id:"creating-the-solido-instance"},"Creating the Solido instance."),(0,n.kt)("p",null,"In order to create the Solido instance it is necessary to supply commands to the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"solido create-solido --solido-program-id $solido-program-id --stake-pool-program-id  $stake-pool-program-id --fee-numerator $fee-numerator --fee-denominator $fee-denominator --max-validators $max-validators --max-maintainers $max-maintainers --insurance-fee $insurance-fee --treasury-fee $treasury-fee --validation-fee $validation-fee --manager-fee $manager-fee --insurance-account-owner $insurance-account-owner --treasury-account-owner $treasury-account-ownder --manager-fee-account-owner $manager-fee-account-owner --manager $manager\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"solido-program-id")," -> This is the address of the Solido program"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"stake-pool-program-id")," -> This is the address of the stake pool program deployed with Solido"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"fee-numerator")," -> The numerator of the fee fraction"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"fee-denominator")," -> The denominator of the fee fraction"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"max-validators")," -> The maximum number of validators that the Solido instance will support"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"max-maintainers")," -> The maximum number of maintainers that the Solido instance will support"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"insurance-fee")," -> The share of the fee for insurance"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"treasury-fee")," -> The share of the fee for treasury"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"validation-fee")," -> The share of the fee for validation"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"manager-fee")," -> The share of the fee for manager"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"insurance-account-owner")," -> The account who will own the stSOL SPL token account that receives the treasury fees"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"treasury-account-owner")," -> The account who will own the stSOL SPL token account that receives the treasury fees"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"manager-fee-account-owner")," -> The account who will own the stSOL SPL token account that receives the manager fees"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"manager(optional)")," -> If defined, the Solido instance is created with a manager, otherwise the default fee payer is used"))),(0,n.kt)("li",{parentName:"ul"},"return:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"transaction-address"),": The address of the transaction")))))}u.isMDXComponent=!0}}]);